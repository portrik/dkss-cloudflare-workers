/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Wish` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/wasm-engine-edge";
import type * as $Enums from "../enums.ts";
import type * as Prisma from "../internal/prismaNamespace.ts";

/**
 * Model Wish
 *
 */
export type WishModel = runtime.Types.Result.DefaultSelection<Prisma.$WishPayload>;

export type AggregateWish = {
	_count: WishCountAggregateOutputType | null;
	_min: WishMinAggregateOutputType | null;
	_max: WishMaxAggregateOutputType | null;
};

export type WishMinAggregateOutputType = {
	id: string | null;
	userId: string | null;
	content: string | null;
	createdAt: Date | null;
	deletedAt: Date | null;
};

export type WishMaxAggregateOutputType = {
	id: string | null;
	userId: string | null;
	content: string | null;
	createdAt: Date | null;
	deletedAt: Date | null;
};

export type WishCountAggregateOutputType = {
	id: number;
	userId: number;
	content: number;
	createdAt: number;
	deletedAt: number;
	_all: number;
};

export type WishMinAggregateInputType = {
	id?: true;
	userId?: true;
	content?: true;
	createdAt?: true;
	deletedAt?: true;
};

export type WishMaxAggregateInputType = {
	id?: true;
	userId?: true;
	content?: true;
	createdAt?: true;
	deletedAt?: true;
};

export type WishCountAggregateInputType = {
	id?: true;
	userId?: true;
	content?: true;
	createdAt?: true;
	deletedAt?: true;
	_all?: true;
};

export type WishAggregateArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Wish to aggregate.
	 */
	where?: Prisma.WishWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Wishes to fetch.
	 */
	orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.WishWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Wishes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Wishes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Wishes
	 **/
	_count?: true | WishCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: WishMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: WishMaxAggregateInputType;
};

export type GetWishAggregateType<T extends WishAggregateArgs> = {
	[P in keyof T & keyof AggregateWish]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateWish[P]>
		: Prisma.GetScalarType<T[P], AggregateWish[P]>;
};

export type WishGroupByArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.WishWhereInput;
	orderBy?: Prisma.WishOrderByWithAggregationInput | Prisma.WishOrderByWithAggregationInput[];
	by: Prisma.WishScalarFieldEnum[] | Prisma.WishScalarFieldEnum;
	having?: Prisma.WishScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: WishCountAggregateInputType | true;
	_min?: WishMinAggregateInputType;
	_max?: WishMaxAggregateInputType;
};

export type WishGroupByOutputType = {
	id: string;
	userId: string;
	content: string;
	createdAt: Date;
	deletedAt: Date | null;
	_count: WishCountAggregateOutputType | null;
	_min: WishMinAggregateOutputType | null;
	_max: WishMaxAggregateOutputType | null;
};

type GetWishGroupByPayload<T extends WishGroupByArgs> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<WishGroupByOutputType, T["by"]> & {
			[P in keyof T & keyof WishGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], WishGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], WishGroupByOutputType[P]>;
		}
	>
>;

export type WishWhereInput = {
	AND?: Prisma.WishWhereInput | Prisma.WishWhereInput[];
	OR?: Prisma.WishWhereInput[];
	NOT?: Prisma.WishWhereInput | Prisma.WishWhereInput[];
	id?: Prisma.StringFilter<"Wish"> | string;
	userId?: Prisma.StringFilter<"Wish"> | string;
	content?: Prisma.StringFilter<"Wish"> | string;
	createdAt?: Prisma.DateTimeFilter<"Wish"> | Date | string;
	deletedAt?: Prisma.DateTimeNullableFilter<"Wish"> | Date | string | null;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type WishOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
};

export type WishWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.WishWhereInput | Prisma.WishWhereInput[];
		OR?: Prisma.WishWhereInput[];
		NOT?: Prisma.WishWhereInput | Prisma.WishWhereInput[];
		userId?: Prisma.StringFilter<"Wish"> | string;
		content?: Prisma.StringFilter<"Wish"> | string;
		createdAt?: Prisma.DateTimeFilter<"Wish"> | Date | string;
		deletedAt?: Prisma.DateTimeNullableFilter<"Wish"> | Date | string | null;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	},
	"id"
>;

export type WishOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
	_count?: Prisma.WishCountOrderByAggregateInput;
	_max?: Prisma.WishMaxOrderByAggregateInput;
	_min?: Prisma.WishMinOrderByAggregateInput;
};

export type WishScalarWhereWithAggregatesInput = {
	AND?: Prisma.WishScalarWhereWithAggregatesInput | Prisma.WishScalarWhereWithAggregatesInput[];
	OR?: Prisma.WishScalarWhereWithAggregatesInput[];
	NOT?: Prisma.WishScalarWhereWithAggregatesInput | Prisma.WishScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Wish"> | string;
	userId?: Prisma.StringWithAggregatesFilter<"Wish"> | string;
	content?: Prisma.StringWithAggregatesFilter<"Wish"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Wish"> | Date | string;
	deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Wish"> | Date | string | null;
};

export type WishCreateInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	deletedAt?: Date | string | null;
	user: Prisma.UserCreateNestedOneWithoutWishesInput;
};

export type WishUncheckedCreateInput = {
	id?: string;
	userId: string;
	content: string;
	createdAt?: Date | string;
	deletedAt?: Date | string | null;
};

export type WishUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
	user?: Prisma.UserUpdateOneRequiredWithoutWishesNestedInput;
};

export type WishUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type WishCreateManyInput = {
	id?: string;
	userId: string;
	content: string;
	createdAt?: Date | string;
	deletedAt?: Date | string | null;
};

export type WishUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type WishUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type WishListRelationFilter = {
	every?: Prisma.WishWhereInput;
	some?: Prisma.WishWhereInput;
	none?: Prisma.WishWhereInput;
};

export type WishOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type WishCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	deletedAt?: Prisma.SortOrder;
};

export type WishMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	deletedAt?: Prisma.SortOrder;
};

export type WishMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	deletedAt?: Prisma.SortOrder;
};

export type WishCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>
		| Prisma.WishCreateWithoutUserInput[]
		| Prisma.WishUncheckedCreateWithoutUserInput[];
	connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.WishCreateManyUserInputEnvelope;
	connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
};

export type WishUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>
		| Prisma.WishCreateWithoutUserInput[]
		| Prisma.WishUncheckedCreateWithoutUserInput[];
	connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.WishCreateManyUserInputEnvelope;
	connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
};

export type WishUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>
		| Prisma.WishCreateWithoutUserInput[]
		| Prisma.WishUncheckedCreateWithoutUserInput[];
	connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[];
	upsert?: Prisma.WishUpsertWithWhereUniqueWithoutUserInput | Prisma.WishUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.WishCreateManyUserInputEnvelope;
	set?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	disconnect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	delete?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	update?: Prisma.WishUpdateWithWhereUniqueWithoutUserInput | Prisma.WishUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?: Prisma.WishUpdateManyWithWhereWithoutUserInput | Prisma.WishUpdateManyWithWhereWithoutUserInput[];
	deleteMany?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[];
};

export type WishUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>
		| Prisma.WishCreateWithoutUserInput[]
		| Prisma.WishUncheckedCreateWithoutUserInput[];
	connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[];
	upsert?: Prisma.WishUpsertWithWhereUniqueWithoutUserInput | Prisma.WishUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.WishCreateManyUserInputEnvelope;
	set?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	disconnect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	delete?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[];
	update?: Prisma.WishUpdateWithWhereUniqueWithoutUserInput | Prisma.WishUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?: Prisma.WishUpdateManyWithWhereWithoutUserInput | Prisma.WishUpdateManyWithWhereWithoutUserInput[];
	deleteMany?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[];
};

export type NullableDateTimeFieldUpdateOperationsInput = {
	set?: Date | string | null;
};

export type WishCreateWithoutUserInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	deletedAt?: Date | string | null;
};

export type WishUncheckedCreateWithoutUserInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	deletedAt?: Date | string | null;
};

export type WishCreateOrConnectWithoutUserInput = {
	where: Prisma.WishWhereUniqueInput;
	create: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>;
};

export type WishCreateManyUserInputEnvelope = {
	data: Prisma.WishCreateManyUserInput | Prisma.WishCreateManyUserInput[];
};

export type WishUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.WishWhereUniqueInput;
	update: Prisma.XOR<Prisma.WishUpdateWithoutUserInput, Prisma.WishUncheckedUpdateWithoutUserInput>;
	create: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>;
};

export type WishUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.WishWhereUniqueInput;
	data: Prisma.XOR<Prisma.WishUpdateWithoutUserInput, Prisma.WishUncheckedUpdateWithoutUserInput>;
};

export type WishUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.WishScalarWhereInput;
	data: Prisma.XOR<Prisma.WishUpdateManyMutationInput, Prisma.WishUncheckedUpdateManyWithoutUserInput>;
};

export type WishScalarWhereInput = {
	AND?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[];
	OR?: Prisma.WishScalarWhereInput[];
	NOT?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[];
	id?: Prisma.StringFilter<"Wish"> | string;
	userId?: Prisma.StringFilter<"Wish"> | string;
	content?: Prisma.StringFilter<"Wish"> | string;
	createdAt?: Prisma.DateTimeFilter<"Wish"> | Date | string;
	deletedAt?: Prisma.DateTimeNullableFilter<"Wish"> | Date | string | null;
};

export type WishCreateManyUserInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	deletedAt?: Date | string | null;
};

export type WishUpdateWithoutUserInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type WishUncheckedUpdateWithoutUserInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type WishUncheckedUpdateManyWithoutUserInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type WishSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
	runtime.Types.Extensions.GetSelect<
		{
			id?: boolean;
			userId?: boolean;
			content?: boolean;
			createdAt?: boolean;
			deletedAt?: boolean;
			user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		},
		ExtArgs["result"]["wish"]
	>;

export type WishSelectCreateManyAndReturn<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		userId?: boolean;
		content?: boolean;
		createdAt?: boolean;
		deletedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["wish"]
>;

export type WishSelectUpdateManyAndReturn<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		userId?: boolean;
		content?: boolean;
		createdAt?: boolean;
		deletedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["wish"]
>;

export type WishSelectScalar = {
	id?: boolean;
	userId?: boolean;
	content?: boolean;
	createdAt?: boolean;
	deletedAt?: boolean;
};

export type WishOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
	runtime.Types.Extensions.GetOmit<"id" | "userId" | "content" | "createdAt" | "deletedAt", ExtArgs["result"]["wish"]>;
export type WishInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
	{
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	};
export type WishIncludeCreateManyAndReturn<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type WishIncludeUpdateManyAndReturn<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $WishPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
	{
		name: "Wish";
		objects: {
			user: Prisma.$UserPayload<ExtArgs>;
		};
		scalars: runtime.Types.Extensions.GetPayloadResult<
			{
				id: string;
				userId: string;
				content: string;
				createdAt: Date;
				deletedAt: Date | null;
			},
			ExtArgs["result"]["wish"]
		>;
		composites: {};
	};

export type WishGetPayload<S extends boolean | null | undefined | WishDefaultArgs> = runtime.Types.Result.GetResult<
	Prisma.$WishPayload,
	S
>;

export type WishCountArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<WishFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: WishCountAggregateInputType | true;
};

export interface WishDelegate<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[k: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Wish"]; meta: { name: "Wish" } };
	/**
	 * Find zero or one Wish that matches the filter.
	 * @param {WishFindUniqueArgs} args - Arguments to find a Wish
	 * @example
	 * // Get one Wish
	 * const wish = await prisma.wish.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends WishFindUniqueArgs>(
		args: Prisma.SelectSubset<T, WishFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Wish that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {WishFindUniqueOrThrowArgs} args - Arguments to find a Wish
	 * @example
	 * // Get one Wish
	 * const wish = await prisma.wish.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends WishFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, WishFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Wish that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {WishFindFirstArgs} args - Arguments to find a Wish
	 * @example
	 * // Get one Wish
	 * const wish = await prisma.wish.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends WishFindFirstArgs>(
		args?: Prisma.SelectSubset<T, WishFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Wish that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {WishFindFirstOrThrowArgs} args - Arguments to find a Wish
	 * @example
	 * // Get one Wish
	 * const wish = await prisma.wish.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends WishFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, WishFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Wishes that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {WishFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Wishes
	 * const wishes = await prisma.wish.findMany()
	 *
	 * // Get first 10 Wishes
	 * const wishes = await prisma.wish.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const wishWithIdOnly = await prisma.wish.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends WishFindManyArgs>(
		args?: Prisma.SelectSubset<T, WishFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
	>;

	/**
	 * Create a Wish.
	 * @param {WishCreateArgs} args - Arguments to create a Wish.
	 * @example
	 * // Create one Wish
	 * const Wish = await prisma.wish.create({
	 *   data: {
	 *     // ... data to create a Wish
	 *   }
	 * })
	 *
	 */
	create<T extends WishCreateArgs>(
		args: Prisma.SelectSubset<T, WishCreateArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Wishes.
	 * @param {WishCreateManyArgs} args - Arguments to create many Wishes.
	 * @example
	 * // Create many Wishes
	 * const wish = await prisma.wish.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends WishCreateManyArgs>(
		args?: Prisma.SelectSubset<T, WishCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many Wishes and returns the data saved in the database.
	 * @param {WishCreateManyAndReturnArgs} args - Arguments to create many Wishes.
	 * @example
	 * // Create many Wishes
	 * const wish = await prisma.wish.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many Wishes and only return the `id`
	 * const wishWithIdOnly = await prisma.wish.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends WishCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, WishCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>
	>;

	/**
	 * Delete a Wish.
	 * @param {WishDeleteArgs} args - Arguments to delete one Wish.
	 * @example
	 * // Delete one Wish
	 * const Wish = await prisma.wish.delete({
	 *   where: {
	 *     // ... filter to delete one Wish
	 *   }
	 * })
	 *
	 */
	delete<T extends WishDeleteArgs>(
		args: Prisma.SelectSubset<T, WishDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Wish.
	 * @param {WishUpdateArgs} args - Arguments to update one Wish.
	 * @example
	 * // Update one Wish
	 * const wish = await prisma.wish.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends WishUpdateArgs>(
		args: Prisma.SelectSubset<T, WishUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Wishes.
	 * @param {WishDeleteManyArgs} args - Arguments to filter Wishes to delete.
	 * @example
	 * // Delete a few Wishes
	 * const { count } = await prisma.wish.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends WishDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, WishDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Wishes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {WishUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Wishes
	 * const wish = await prisma.wish.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends WishUpdateManyArgs>(
		args: Prisma.SelectSubset<T, WishUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Wishes and returns the data updated in the database.
	 * @param {WishUpdateManyAndReturnArgs} args - Arguments to update many Wishes.
	 * @example
	 * // Update many Wishes
	 * const wish = await prisma.wish.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more Wishes and only return the `id`
	 * const wishWithIdOnly = await prisma.wish.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends WishUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, WishUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>
	>;

	/**
	 * Create or update one Wish.
	 * @param {WishUpsertArgs} args - Arguments to update or create a Wish.
	 * @example
	 * // Update or create a Wish
	 * const wish = await prisma.wish.upsert({
	 *   create: {
	 *     // ... data to create a Wish
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Wish we want to update
	 *   }
	 * })
	 */
	upsert<T extends WishUpsertArgs>(
		args: Prisma.SelectSubset<T, WishUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__WishClient<
		runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of Wishes.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {WishCountArgs} args - Arguments to filter Wishes to count.
	 * @example
	 * // Count the number of Wishes
	 * const count = await prisma.wish.count({
	 *   where: {
	 *     // ... the filter for the Wishes we want to count
	 *   }
	 * })
	 **/
	count<T extends WishCountArgs>(
		args?: Prisma.Subset<T, WishCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], WishCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Wish.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {WishAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends WishAggregateArgs>(
		args: Prisma.Subset<T, WishAggregateArgs>,
	): Prisma.PrismaPromise<GetWishAggregateType<T>>;

	/**
	 * Group by Wish.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {WishGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends WishGroupByArgs,
		HasSelectOrTake extends Prisma.Or<Prisma.Extends<"skip", Prisma.Keys<T>>, Prisma.Extends<"take", Prisma.Keys<T>>>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: WishGroupByArgs["orderBy"] }
			: { orderBy?: WishGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, WishGroupByArgs, OrderByArg> & InputErrors,
	): {} extends InputErrors ? GetWishGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Wish model
	 */
	readonly fields: WishFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Wish.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WishClient<
	T,
	Null = never,
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
		onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Wish model
 */
export interface WishFieldRefs {
	readonly id: Prisma.FieldRef<"Wish", "String">;
	readonly userId: Prisma.FieldRef<"Wish", "String">;
	readonly content: Prisma.FieldRef<"Wish", "String">;
	readonly createdAt: Prisma.FieldRef<"Wish", "DateTime">;
	readonly deletedAt: Prisma.FieldRef<"Wish", "DateTime">;
}

// Custom InputTypes
/**
 * Wish findUnique
 */
export type WishFindUniqueArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * Filter, which Wish to fetch.
	 */
	where: Prisma.WishWhereUniqueInput;
};

/**
 * Wish findUniqueOrThrow
 */
export type WishFindUniqueOrThrowArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * Filter, which Wish to fetch.
	 */
	where: Prisma.WishWhereUniqueInput;
};

/**
 * Wish findFirst
 */
export type WishFindFirstArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * Filter, which Wish to fetch.
	 */
	where?: Prisma.WishWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Wishes to fetch.
	 */
	orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Wishes.
	 */
	cursor?: Prisma.WishWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Wishes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Wishes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Wishes.
	 */
	distinct?: Prisma.WishScalarFieldEnum | Prisma.WishScalarFieldEnum[];
};

/**
 * Wish findFirstOrThrow
 */
export type WishFindFirstOrThrowArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * Filter, which Wish to fetch.
	 */
	where?: Prisma.WishWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Wishes to fetch.
	 */
	orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Wishes.
	 */
	cursor?: Prisma.WishWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Wishes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Wishes.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Wishes.
	 */
	distinct?: Prisma.WishScalarFieldEnum | Prisma.WishScalarFieldEnum[];
};

/**
 * Wish findMany
 */
export type WishFindManyArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * Filter, which Wishes to fetch.
	 */
	where?: Prisma.WishWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Wishes to fetch.
	 */
	orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Wishes.
	 */
	cursor?: Prisma.WishWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Wishes from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Wishes.
	 */
	skip?: number;
	distinct?: Prisma.WishScalarFieldEnum | Prisma.WishScalarFieldEnum[];
};

/**
 * Wish create
 */
export type WishCreateArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Wish.
	 */
	data: Prisma.XOR<Prisma.WishCreateInput, Prisma.WishUncheckedCreateInput>;
};

/**
 * Wish createMany
 */
export type WishCreateManyArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Wishes.
	 */
	data: Prisma.WishCreateManyInput | Prisma.WishCreateManyInput[];
};

/**
 * Wish createManyAndReturn
 */
export type WishCreateManyAndReturnArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * The data used to create many Wishes.
	 */
	data: Prisma.WishCreateManyInput | Prisma.WishCreateManyInput[];
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Wish update
 */
export type WishUpdateArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Wish.
	 */
	data: Prisma.XOR<Prisma.WishUpdateInput, Prisma.WishUncheckedUpdateInput>;
	/**
	 * Choose, which Wish to update.
	 */
	where: Prisma.WishWhereUniqueInput;
};

/**
 * Wish updateMany
 */
export type WishUpdateManyArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Wishes.
	 */
	data: Prisma.XOR<Prisma.WishUpdateManyMutationInput, Prisma.WishUncheckedUpdateManyInput>;
	/**
	 * Filter which Wishes to update
	 */
	where?: Prisma.WishWhereInput;
	/**
	 * Limit how many Wishes to update.
	 */
	limit?: number;
};

/**
 * Wish updateManyAndReturn
 */
export type WishUpdateManyAndReturnArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * The data used to update Wishes.
	 */
	data: Prisma.XOR<Prisma.WishUpdateManyMutationInput, Prisma.WishUncheckedUpdateManyInput>;
	/**
	 * Filter which Wishes to update
	 */
	where?: Prisma.WishWhereInput;
	/**
	 * Limit how many Wishes to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Wish upsert
 */
export type WishUpsertArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Wish to update in case it exists.
	 */
	where: Prisma.WishWhereUniqueInput;
	/**
	 * In case the Wish found by the `where` argument doesn't exist, create a new Wish with this data.
	 */
	create: Prisma.XOR<Prisma.WishCreateInput, Prisma.WishUncheckedCreateInput>;
	/**
	 * In case the Wish was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<Prisma.WishUpdateInput, Prisma.WishUncheckedUpdateInput>;
};

/**
 * Wish delete
 */
export type WishDeleteArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
	/**
	 * Filter which Wish to delete.
	 */
	where: Prisma.WishWhereUniqueInput;
};

/**
 * Wish deleteMany
 */
export type WishDeleteManyArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Wishes to delete
	 */
	where?: Prisma.WishWhereInput;
	/**
	 * Limit how many Wishes to delete.
	 */
	limit?: number;
};

/**
 * Wish without action
 */
export type WishDefaultArgs<
	ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Wish
	 */
	select?: Prisma.WishSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Wish
	 */
	omit?: Prisma.WishOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.WishInclude<ExtArgs> | null;
};
